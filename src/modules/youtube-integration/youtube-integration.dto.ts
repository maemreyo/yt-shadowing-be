import { z } from 'zod';

/**
 * DTO for searching YouTube videos suitable for language learning
 */
export class VideoSearchDTO {
  static schema = z.object({
    query: z.string().min(2).max(100).describe('Search query'),
    language: z.string().length(2).default('en').describe('ISO 639-1 language code'),
    duration: z.enum(['short', 'medium', 'long']).optional().describe('Video duration category: short (<4min), medium (4-20min), long (>20min)'),
    maxResults: z.number().min(1).max(50).default(20).describe('Maximum results to return'),
    pageToken: z.string().optional().describe('Page token for pagination'),
    orderBy: z.enum(['relevance', 'viewCount', 'date', 'rating']).default('relevance').describe('Sort order for results'),
    channelId: z.string().optional().describe('Filter by specific channel'),
    captionsRequired: z.boolean().default(true).describe('Only return videos with captions')
  });

  query!: string;
  language!: string;
  duration?: 'short' | 'medium' | 'long';
  maxResults!: number;
  pageToken?: string;
  orderBy!: 'relevance' | 'viewCount' | 'date' | 'rating';
  channelId?: string;
  captionsRequired!: boolean;
}

/**
 * DTO for getting video information
 */
export class VideoInfoDTO {
  static schema = z.object({
    videoId: z.string().regex(/^[a-zA-Z0-9_-]{11}$/, 'Invalid YouTube video ID'),
    includeCaptions: z.boolean().default(true).describe('Include available captions info'),
    includeMetadata: z.boolean().default(true).describe('Include full metadata')
  });

  videoId!: string;
  includeCaptions!: boolean;
  includeMetadata!: boolean;
}

/**
 * DTO for requesting video captions
 */
export class CaptionRequestDTO {
  static schema = z.object({
    videoId: z.string().regex(/^[a-zA-Z0-9_-]{11}$/, 'Invalid YouTube video ID'),
    language: z.string().length(2).default('en').describe('ISO 639-1 language code'),
    format: z.enum(['srt', 'vtt', 'json']).default('json').describe('Caption format'),
    autoGenerated: z.boolean().default(false).describe('Accept auto-generated captions')
  });

  videoId!: string;
  language!: string;
  format!: 'srt' | 'vtt' | 'json';
  autoGenerated!: boolean;
}

/**
 * Response DTO for video metadata
 */
export class VideoMetadataDTO {
  videoId!: string;
  title!: string;
  description!: string;
  duration!: number; // seconds
  channelId!: string;
  channelName!: string;
  thumbnailUrl!: string;
  publishedAt!: Date;
  viewCount!: number;
  likeCount?: number;
  tags!: string[];

  availableCaptions!: Array<{
    language: string;
    name: string;
    isAutoGenerated: boolean;
  }>;

  suitabilityScore!: number; // 0-100 for language learning
  difficultyLevel!: number; // 1-5

  // Language learning specific metadata
  learningMetadata?: {
    speechRate?: number; // words per minute
    vocabularyLevel?: string; // A1-C2
    hasSubtitles: boolean;
    isEducational: boolean;
    topics: string[];
  };
}

/**
 * Caption format DTOs
 */
export interface CaptionSegment {
  index: number;
  text: string;
  startTime: number; // seconds
  endTime: number; // seconds
  duration: number;
}

export class CaptionDataDTO {
  videoId!: string;
  language!: string;
  isAutoGenerated!: boolean;
  segments!: CaptionSegment[];
  fullText!: string;
  wordCount!: number;
  estimatedDifficulty!: number; // 1-5
}

/**
 * YouTube API error response
 */
export class YouTubeErrorDTO {
  error!: string;
  message!: string;
  code!: number;
  details?: any;
}

/**
 * Paginated search results
 */
export class VideoSearchResultDTO {
  videos!: VideoMetadataDTO[];
  nextPageToken?: string;
  prevPageToken?: string;
  totalResults!: number;
  resultsPerPage!: number;
}

/**
 * DTO for tracking YouTube API usage
 */
export class ApiUsageTrackingDTO {
  endpoint!: string;
  quotaCost!: number;
  timestamp!: Date;
  success!: boolean;
  errorMessage?: string;
}

/**
 * DTO for video validation
 */
export class VideoValidationDTO {
  static schema = z.object({
    videoId: z.string().regex(/^[a-zA-Z0-9_-]{11}$/),
    checkCaptions: z.boolean().default(true),
    checkDuration: z.boolean().default(true),
    minDuration: z.number().min(30).default(60), // seconds
    maxDuration: z.number().max(3600).default(1200), // 20 minutes
    requiredLanguages: z.array(z.string()).default(['en'])
  });

  videoId!: string;
  checkCaptions!: boolean;
  checkDuration!: boolean;
  minDuration!: number;
  maxDuration!: number;
  requiredLanguages!: string[];
}

/**
 * Video validation result
 */
export class VideoValidationResultDTO {
  isValid!: boolean;
  videoId!: string;
  issues!: string[];
  metadata?: VideoMetadataDTO;
  recommendations?: {
    difficulty: number;
    suitability: number;
    reasons: string[];
  };
}