import { FastifyInstance } from 'fastify';
import { Container } from 'typedi';
import { YouTubeIntegrationController } from './youtube-integration.controller';
import { authMiddleware } from '@modules/auth/middleware/auth.middleware';
import { rateLimiter } from '@shared/middleware/rate-limiter';

export default async function youtubeIntegrationRoutes(app: FastifyInstance) {
  const controller = Container.get(YouTubeIntegrationController);

  // Apply auth middleware to all routes
  app.addHook('onRequest', authMiddleware);

  // Apply rate limiting
  app.addHook('preHandler', rateLimiter({
    max: 100,
    timeWindow: '15 minutes'
  }));

  // Search videos
  app.get('/search', {
    schema: {
      tags: ['YouTube'],
      summary: 'Search for YouTube videos suitable for language learning',
      querystring: {
        type: 'object',
        properties: {
          query: { type: 'string', minLength: 2, maxLength: 100 },
          language: { type: 'string', minLength: 2, maxLength: 2, default: 'en' },
          duration: { type: 'string', enum: ['short', 'medium', 'long'] },
          maxResults: { type: 'number', minimum: 1, maximum: 50, default: 20 },
          pageToken: { type: 'string' },
          orderBy: { type: 'string', enum: ['relevance', 'viewCount', 'date', 'rating'], default: 'relevance' },
          channelId: { type: 'string' },
          captionsRequired: { type: 'boolean', default: true }
        },
        required: ['query']
      },
      response: {
        200: {
          type: 'object',
          properties: {
            success: { type: 'boolean' },
            message: { type: 'string' },
            data: {
              type: 'object',
              properties: {
                videos: { type: 'array' },
                nextPageToken: { type: 'string' },
                prevPageToken: { type: 'string' },
                totalResults: { type: 'number' },
                resultsPerPage: { type: 'number' }
              }
            }
          }
        }
      }
    }
  }, controller.searchVideos.bind(controller));

  // Get video info
  app.get('/video/:videoId', {
    schema: {
      tags: ['YouTube'],
      summary: 'Get detailed information about a YouTube video',
      params: {
        type: 'object',
        properties: {
          videoId: { type: 'string', pattern: '^[a-zA-Z0-9_-]{11}$' }
        },
        required: ['videoId']
      },
      querystring: {
        type: 'object',
        properties: {
          includeCaptions: { type: 'boolean', default: true },
          includeMetadata: { type: 'boolean', default: true }
        }
      }
    }
  }, controller.getVideoInfo.bind(controller));

  // Get captions
  app.get('/captions/:videoId', {
    schema: {
      tags: ['YouTube'],
      summary: 'Get captions/subtitles for a YouTube video',
      params: {
        type: 'object',
        properties: {
          videoId: { type: 'string', pattern: '^[a-zA-Z0-9_-]{11}$' }
        },
        required: ['videoId']
      },
      querystring: {
        type: 'object',
        properties: {
          language: { type: 'string', minLength: 2, maxLength: 2, default: 'en' },
          format: { type: 'string', enum: ['srt', 'vtt', 'json'], default: 'json' },
          autoGenerated: { type: 'boolean', default: false }
        }
      }
    },
    preHandler: rateLimiter({
      max: 50,
      timeWindow: '15 minutes'
    })
  }, controller.getCaptions.bind(controller));

  // Validate video
  app.post('/validate', {
    schema: {
      tags: ['YouTube'],
      summary: 'Validate if a video is suitable for language learning',
      body: {
        type: 'object',
        properties: {
          videoId: { type: 'string', pattern: '^[a-zA-Z0-9_-]{11}$' },
          checkCaptions: { type: 'boolean', default: true },
          checkDuration: { type: 'boolean', default: true },
          minDuration: { type: 'number', minimum: 30, default: 60 },
          maxDuration: { type: 'number', maximum: 3600, default: 1200 },
          requiredLanguages: {
            type: 'array',
            items: { type: 'string' },
            default: ['en']
          }
        },
        required: ['videoId']
      }
    }
  }, controller.validateVideo.bind(controller));

  // Get API usage
  app.get('/usage', {
    schema: {
      tags: ['YouTube'],
      summary: 'Get YouTube API usage statistics'
    },
    preHandler: [
      // Additional admin check could be added here
    ]
  }, controller.getApiUsage.bind(controller));

  // Health check
  app.get('/health', {
    schema: {
      tags: ['YouTube'],
      summary: 'YouTube integration health check'
    }
  }, async (request, reply) => {
    return reply.send({
      success: true,
      message: 'YouTube integration is healthy',
      data: {
        service: 'youtube-integration',
        status: 'operational',
        timestamp: new Date()
      }
    });
  });
}

// ============================================